name: StoreLoop Enhanced CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '16'

jobs:
  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        pip install -r requirements.txt
    
    - name: Run Black (Code Formatting)
      run: black --check --diff .
    
    - name: Run isort (Import Sorting)
      run: isort --check-only --diff .
    
    - name: Run Flake8 (Linting)
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Run MyPy (Type Checking)
      run: mypy . --ignore-missing-imports --no-strict-optional
      continue-on-error: true

  test:
    name: Django Tests
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: storeloop_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    strategy:
      matrix:
        test-group: [unit, integration, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-django pytest-cov pytest-xdist coverage
    
    - name: Run Unit Tests
      if: matrix.test-group == 'unit'
      run: |
        pytest stores/tests/ products/tests/ -v --cov=stores --cov=products --cov-report=xml --cov-report=html
      env:
        SECRET_KEY: test_secret_key_for_ci
        DEBUG: 'False'
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/storeloop_test
        REDIS_URL: redis://localhost:6379/0
        RAZORPAY_KEY_ID: test_key_id
        RAZORPAY_KEY_SECRET: test_key_secret
    
    - name: Run Integration Tests
      if: matrix.test-group == 'integration'
      run: |
        pytest orders/tests/ -v --cov=orders --cov-report=xml --cov-report=html
      env:
        SECRET_KEY: test_secret_key_for_ci
        DEBUG: 'False'
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/storeloop_test
        REDIS_URL: redis://localhost:6379/0
        RAZORPAY_KEY_ID: test_key_id
        RAZORPAY_KEY_SECRET: test_key_secret
    
    - name: Run Security Tests
      if: matrix.test-group == 'security'
      run: |
        # Test security configurations
        python manage.py check --deploy
        # Run security-focused tests
        pytest -k "security" -v
      env:
        SECRET_KEY: test_secret_key_for_ci
        DEBUG: 'False'
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/storeloop_test
        REDIS_URL: redis://localhost:6379/0
        RAZORPAY_KEY_ID: test_key_id
        RAZORPAY_KEY_SECRET: test_key_secret
    
    - name: Upload coverage to Codecov
      if: matrix.test-group == 'unit'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npx eslint static/js/ --ext .js,.jsx
      continue-on-error: true
    
    - name: Build CSS with Tailwind
      run: npm run build-css
    
    - name: Check for CSS/JS build artifacts
      run: |
        ls -la staticcss/
        ls -la staticjs/

  models:
    name: Model Tests
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: storeloop_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-django
    
    - name: Run Model Tests
      run: |
        pytest stores/tests/test_models.py products/tests/test_models.py orders/tests/test_models.py -v
      env:
        SECRET_KEY: test_secret_key_for_ci
        DEBUG: 'False'
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/storeloop_test
        RAZORPAY_KEY_ID: test_key_id
        RAZORPAY_KEY_SECRET: test_key_secret
    
    - name: Test Migrations
      run: |
        python manage.py makemigrations --check --dry-run
        python manage.py migrate
      env:
        SECRET_KEY: test_secret_key_for_ci
        DEBUG: 'False'
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/storeloop_test
        RAZORPAY_KEY_ID: test_key_id
        RAZORPAY_KEY_SECRET: test_key_secret

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        pip install -r requirements.txt
    
    - name: Run Bandit (Security Linter)
      run: bandit -r . -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Run Safety (Dependency Vulnerability Check)
      run: safety check --json --output safety-report.json
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: storeloop_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust
    
    - name: Run Django Check
      run: python manage.py check
      env:
        SECRET_KEY: test_secret_key_for_ci
        DEBUG: 'False'
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/storeloop_test
        RAZORPAY_KEY_ID: test_key_id
        RAZORPAY_KEY_SECRET: test_key_secret
    
    - name: Collect Static Files
      run: python manage.py collectstatic --noinput
      env:
        SECRET_KEY: test_secret_key_for_ci
        DEBUG: 'False'
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/storeloop_test
        RAZORPAY_KEY_ID: test_key_id
        RAZORPAY_KEY_SECRET: test_key_secret

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [lint, test, frontend, models, security]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.lint.result == 'success' && needs.test.result == 'success' && needs.models.result == 'success'
      run: echo "✅ All tests passed successfully!"
    
    - name: Notify Failure
      if: needs.lint.result == 'failure' || needs.test.result == 'failure' || needs.models.result == 'failure'
      run: |
        echo "❌ Some tests failed:"
        echo "Lint: ${{ needs.lint.result }}"
        echo "Tests: ${{ needs.test.result }}"
        echo "Models: ${{ needs.models.result }}"
        echo "Security: ${{ needs.security.result }}"
        exit 1